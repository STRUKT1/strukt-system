name: Schema Drift Detection

on:
  pull_request:
    paths:
      - 'schema/AIRTABLE_SPEC.yaml'
      - '.github/workflows/schema-drift.yml'
  workflow_dispatch:

jobs:
  drift-detection:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure schema exists
        run: |
          test -f schema/AIRTABLE_SPEC.yaml || { 
            echo "‚ùå No schema/AIRTABLE_SPEC.yaml found in this repository"
            exit 1
          }

      - name: Install yq for YAML parsing
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Fetch peer schema
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          set -e
          REPO="${{ github.repository }}"
          if [[ "$REPO" == "STRUKT1/strukt-system" ]]; then
            PEER="STRUKT1/strukt-app"
          else
            PEER="STRUKT1/strukt-system"
          fi
          
          echo "üîç Fetching schema from peer repository: $PEER"
          mkdir -p .schema
          
          if [[ -n "$GH_PAT" ]]; then
            curl -sSL -H "Authorization: token $GH_PAT" \
              "https://raw.githubusercontent.com/$PEER/main/schema/AIRTABLE_SPEC.yaml" \
              -o .schema/peer.yaml 2>/dev/null || {
                echo "‚ö†Ô∏è Could not fetch schema from $PEER (repo may not exist or not accessible)"
                echo "" > .schema/peer.yaml
              }
          else
            echo "‚ö†Ô∏è No GH_PAT provided, skipping peer schema fetch"
            echo "" > .schema/peer.yaml
          fi

      - name: Compare schemas
        id: compare
        run: |
          set -e
          
          # Calculate hashes
          LOCAL_HASH=$(sha256sum schema/AIRTABLE_SPEC.yaml | awk '{print $1}')
          PEER_HASH=$(sha256sum .schema/peer.yaml 2>/dev/null | awk '{print $1}' || echo "missing")
          
          echo "local_hash=$LOCAL_HASH" >> $GITHUB_OUTPUT
          echo "peer_hash=$PEER_HASH" >> $GITHUB_OUTPUT
          
          # Parse metadata using yq if available, fallback to grep
          if command -v yq >/dev/null 2>&1; then
            LOCAL_VERSION=$(yq '.spec_version // .version' schema/AIRTABLE_SPEC.yaml 2>/dev/null || echo "unknown")
            LOCAL_UPDATED=$(yq '.updated_at' schema/AIRTABLE_SPEC.yaml 2>/dev/null || echo "unknown")
            LOCAL_OWNER=$(yq '.owner_repo' schema/AIRTABLE_SPEC.yaml 2>/dev/null || echo "unknown")
            
            if [[ -s .schema/peer.yaml ]]; then
              PEER_VERSION=$(yq '.spec_version // .version' .schema/peer.yaml 2>/dev/null || echo "unknown")
              PEER_UPDATED=$(yq '.updated_at' .schema/peer.yaml 2>/dev/null || echo "unknown")
              PEER_OWNER=$(yq '.owner_repo' .schema/peer.yaml 2>/dev/null || echo "unknown")
            else
              PEER_VERSION="missing"
              PEER_UPDATED="missing"
              PEER_OWNER="missing"
            fi
          else
            LOCAL_VERSION=$(grep -E "^(spec_)?version:" schema/AIRTABLE_SPEC.yaml | head -1 | sed 's/.*: *//' || echo "unknown")
            LOCAL_UPDATED=$(grep "updated_at:" schema/AIRTABLE_SPEC.yaml | sed 's/.*: *//' || echo "unknown")
            LOCAL_OWNER=$(grep "owner_repo:" schema/AIRTABLE_SPEC.yaml | sed 's/.*: *//' || echo "unknown")
            
            if [[ -s .schema/peer.yaml ]]; then
              PEER_VERSION=$(grep -E "^(spec_)?version:" .schema/peer.yaml | head -1 | sed 's/.*: *//' || echo "unknown")
              PEER_UPDATED=$(grep "updated_at:" .schema/peer.yaml | sed 's/.*: *//' || echo "unknown")
              PEER_OWNER=$(grep "owner_repo:" .schema/peer.yaml | sed 's/.*: *//' || echo "unknown")
            else
              PEER_VERSION="missing"
              PEER_UPDATED="missing"
              PEER_OWNER="missing"
            fi
          fi
          
          echo "local_version=$LOCAL_VERSION" >> $GITHUB_OUTPUT
          echo "local_updated=$LOCAL_UPDATED" >> $GITHUB_OUTPUT
          echo "local_owner=$LOCAL_OWNER" >> $GITHUB_OUTPUT
          echo "peer_version=$PEER_VERSION" >> $GITHUB_OUTPUT
          echo "peer_updated=$PEER_UPDATED" >> $GITHUB_OUTPUT
          echo "peer_owner=$PEER_OWNER" >> $GITHUB_OUTPUT
          
          # Determine drift status
          if [[ "$LOCAL_HASH" == "$PEER_HASH" ]]; then
            echo "drift_detected=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Schemas are in sync"
          else
            echo "drift_detected=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Schema drift detected"
          fi

      - name: Create drift report artifact
        run: |
          cat > schema_drift_report.json << EOF
          {
            "drift_detected": ${{ steps.compare.outputs.drift_detected }},
            "local": {
              "hash": "${{ steps.compare.outputs.local_hash }}",
              "version": "${{ steps.compare.outputs.local_version }}",
              "updated_at": "${{ steps.compare.outputs.local_updated }}",
              "owner_repo": "${{ steps.compare.outputs.local_owner }}"
            },
            "peer": {
              "hash": "${{ steps.compare.outputs.peer_hash }}",
              "version": "${{ steps.compare.outputs.peer_version }}",
              "updated_at": "${{ steps.compare.outputs.peer_updated }}",
              "owner_repo": "${{ steps.compare.outputs.peer_owner }}"
            },
            "repository": "${{ github.repository }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Upload drift report
        uses: actions/upload-artifact@v4
        with:
          name: schema-drift-report
          path: schema_drift_report.json

      - name: Summary
        run: |
          echo "## üìä Schema Drift Detection Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Repository | Hash | Version | Updated |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **${{ github.repository }}** (local) | \`${{ steps.compare.outputs.local_hash }}\` | ${{ steps.compare.outputs.local_version }} | ${{ steps.compare.outputs.local_updated }} |" >> $GITHUB_STEP_SUMMARY
          
          REPO="${{ github.repository }}"
          if [[ "$REPO" == "STRUKT1/strukt-system" ]]; then
            PEER="STRUKT1/strukt-app"
          else
            PEER="STRUKT1/strukt-system"
          fi
          
          echo "| **$PEER** (peer) | \`${{ steps.compare.outputs.peer_hash }}\` | ${{ steps.compare.outputs.peer_version }} | ${{ steps.compare.outputs.peer_updated }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.compare.outputs.drift_detected }}" == "true" ]]; then
            echo "### ‚ö†Ô∏è Drift Detected" >> $GITHUB_STEP_SUMMARY
            echo "The schemas are not in sync. Consider running the sync workflow." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ Schemas in Sync" >> $GITHUB_STEP_SUMMARY
            echo "Both repositories have identical schema files." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: ${{ github.event_name == 'pull_request' && steps.compare.outputs.drift_detected == 'true' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: schema-drift
          message: |
            ## ‚ö†Ô∏è Schema Drift Detected
            
            The Airtable schema in this repository differs from the peer repository:
            
            | Repository | Hash | Version | Updated |
            |------------|------|---------|---------|
            | **${{ github.repository }}** (this PR) | `${{ steps.compare.outputs.local_hash }}` | ${{ steps.compare.outputs.local_version }} | ${{ steps.compare.outputs.local_updated }} |
            | **STRUKT1/strukt-app** (peer) | `${{ steps.compare.outputs.peer_hash }}` | ${{ steps.compare.outputs.peer_version }} | ${{ steps.compare.outputs.peer_updated }} |
            
            ### üõ†Ô∏è Next Steps:
            - If this is a **strukt-system** change: The sync bot will automatically create a PR in strukt-app after merge
            - If this is a **strukt-app** change: Please sync with the latest schema from strukt-system first
            
            ### üìñ Documentation:
            - [Schema Sync Guide](../blob/main/docs/SCHEMA_SYNC.md)
            - [Manual Sync Instructions](../blob/main/docs/SCHEMA_SYNC.md#manual-sync)

      - name: Fail if source-of-truth repo has drift
        if: ${{ steps.compare.outputs.drift_detected == 'true' && github.repository == 'STRUKT1/strukt-system' }}
        run: |
          echo "‚ùå Schema drift detected in source-of-truth repository"
          echo "This repository (strukt-system) must maintain schema consistency"
          echo "Please ensure the schema change is intentional and coordinate with strukt-app"
          exit 1

      - name: Success message
        if: ${{ steps.compare.outputs.drift_detected == 'false' }}
        run: |
          echo "‚úÖ Schema drift check passed - repositories are in sync"