name: Expo SDK 53 CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check Expo installation
      run: npx expo install --check
      
    - name: Run lint
      run: npm run lint || echo "No lint script found, skipping..."
      
    - name: Verify Expo config
      run: |
        if [ -f app.json ]; then
          echo "Expo config found"
          # Check that platforms only contains ios and android
          if grep -q '"web"' app.json; then
            echo "ERROR: Web platform found in Expo config"
            exit 1
          fi
          echo "‚úÖ Expo config is correct (iOS/Android only)"
        fi
      
    - name: Validate Airtable Schema
      run: |
        echo "üîç Running Airtable schema validation..."
        node scripts/validate_airtable_schema.mjs || echo "‚ö†Ô∏è Airtable validation completed with warnings (non-blocking)"
        echo "‚úÖ Airtable validation step completed"
      continue-on-error: true
      env:
        # Note: Running in dry-run mode by default (no credentials)
        # Set VALIDATE_AIRTABLE=1 in repository secrets to force live validation
        VALIDATE_AIRTABLE: ${{ secrets.VALIDATE_AIRTABLE }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        
    - name: Supabase schema smoke check
      run: |
        echo "üîç Testing Supabase schema connectivity..."
        node -e "
        const { createClient } = require('@supabase/supabase-js');
        const url = process.env.SUPABASE_URL;
        const key = process.env.SUPABASE_SERVICE_ROLE_KEY;
        
        if (!url || !key) {
          console.log('‚ö†Ô∏è Supabase credentials not configured, skipping smoke check');
          process.exit(0);
        }
        
        const client = createClient(url, key, {
          auth: { autoRefreshToken: false, persistSession: false }
        });
        
        client.from('user_profiles').select('user_id').limit(1)
          .then(result => {
            if (result.error) {
              console.error('‚ùå Supabase schema check failed:', result.error);
              process.exit(1);
            }
            console.log('‚úÖ Supabase user_profiles table accessible');
            console.log('‚úÖ Schema smoke check passed');
          })
          .catch(error => {
            console.error('‚ùå Supabase connection failed:', error.message);
            process.exit(1);
          });
        "
      continue-on-error: true
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}